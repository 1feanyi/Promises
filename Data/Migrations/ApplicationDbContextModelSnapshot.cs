// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Promises.Data;
using System;

namespace Promises.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Promises.Models.Alias", b =>
                {
                    b.Property<int>("AliasId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AliasName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<Guid?>("EnteredByProfileId");

                    b.Property<DateTime>("EnteredOn");

                    b.HasKey("AliasId");

                    b.HasIndex("EnteredByProfileId");

                    b.ToTable("Alias");
                });

            modelBuilder.Entity("Promises.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Promises.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("Industry");

                    b.Property<byte>("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<string>("WebDomain");

                    b.Property<string>("WebUrl");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Promises.Models.Connection", b =>
                {
                    b.Property<int>("ConnectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsBlacklist");

                    b.Property<bool>("IsConfirmed");

                    b.Property<Guid?>("ProfileId");

                    b.HasKey("ConnectionId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Connection");
                });

            modelBuilder.Entity("Promises.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Degree");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("FieldOfStudy");

                    b.Property<bool>("IsEnrolled");

                    b.Property<string>("Notes");

                    b.Property<DateTime>("StartDate");

                    b.Property<Guid?>("UserProfileId");

                    b.HasKey("EducationId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("Promises.Models.EmailAddress", b =>
                {
                    b.Property<int>("EmailAddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Domain");

                    b.Property<string>("Email");

                    b.Property<int>("Type");

                    b.Property<Guid?>("UserProfileId");

                    b.HasKey("EmailAddressId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("EmailAddress");
                });

            modelBuilder.Entity("Promises.Models.Employment", b =>
                {
                    b.Property<int>("EmploymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EmployerCompanyId");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsCurrent");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Summary");

                    b.Property<string>("Title");

                    b.Property<Guid?>("UserProfileId");

                    b.HasKey("EmploymentId");

                    b.HasIndex("EmployerCompanyId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Employment");
                });

            modelBuilder.Entity("Promises.Models.ExternalProfile", b =>
                {
                    b.Property<int>("ExternalProfileId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("LinkedStatus");

                    b.Property<string>("ProviderAccountId");

                    b.Property<string>("ProviderAccountName");

                    b.Property<int>("Type");

                    b.Property<Guid?>("UserProfileId");

                    b.HasKey("ExternalProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ExternalProfile");
                });

            modelBuilder.Entity("Promises.Models.MailingAddress", b =>
                {
                    b.Property<int>("MailingAddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("Code");

                    b.Property<string>("Country");

                    b.Property<string>("State");

                    b.Property<Guid?>("UserProfileId");

                    b.HasKey("MailingAddressId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("MailingAddress");
                });

            modelBuilder.Entity("Promises.Models.PhoneNumber", b =>
                {
                    b.Property<int>("PhoneNumberId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Number");

                    b.Property<int>("Type");

                    b.Property<Guid?>("UserProfileId");

                    b.HasKey("PhoneNumberId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("Promises.Models.Profile", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MaidenName");

                    b.Property<string>("MiddleName");

                    b.Property<byte>("ProfilePicture");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ProfileId");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("Promises.Models.Promise", b =>
                {
                    b.Property<int>("PromiseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<int>("FeedbackRating");

                    b.Property<string>("FinalNotes");

                    b.Property<DateTime>("FulfilledDate");

                    b.Property<bool>("IsFulfilled");

                    b.Property<bool>("IsLocked");

                    b.Property<string>("Note");

                    b.Property<Guid?>("PromiseByProfileId");

                    b.Property<DateTime>("PromiseDate");

                    b.Property<Guid?>("PromiseToProfileId");

                    b.HasKey("PromiseId");

                    b.HasIndex("PromiseByProfileId");

                    b.HasIndex("PromiseToProfileId");

                    b.ToTable("Promise");
                });

            modelBuilder.Entity("Promises.Models.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Code");

                    b.Property<string>("Country");

                    b.Property<string>("Name");

                    b.Property<string>("State");

                    b.HasKey("SchoolId");

                    b.ToTable("School");
                });

            modelBuilder.Entity("Promises.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Level");

                    b.Property<string>("Name");

                    b.Property<Guid?>("UserProfileId");

                    b.HasKey("SkillId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Promises.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Promises.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Promises.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Promises.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Promises.Models.Alias", b =>
                {
                    b.HasOne("Promises.Models.Profile", "EnteredBy")
                        .WithMany("Aliases")
                        .HasForeignKey("EnteredByProfileId");
                });

            modelBuilder.Entity("Promises.Models.Connection", b =>
                {
                    b.HasOne("Promises.Models.Profile")
                        .WithMany("Connections")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("Promises.Models.Education", b =>
                {
                    b.HasOne("Promises.Models.Profile", "User")
                        .WithMany("EducationHistory")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Promises.Models.EmailAddress", b =>
                {
                    b.HasOne("Promises.Models.Profile", "User")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Promises.Models.Employment", b =>
                {
                    b.HasOne("Promises.Models.Company", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerCompanyId");

                    b.HasOne("Promises.Models.Profile", "User")
                        .WithMany("EmploymentHistory")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Promises.Models.ExternalProfile", b =>
                {
                    b.HasOne("Promises.Models.Profile", "User")
                        .WithMany("ExternalProfiles")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Promises.Models.MailingAddress", b =>
                {
                    b.HasOne("Promises.Models.Profile", "User")
                        .WithMany("MailingAddresses")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Promises.Models.PhoneNumber", b =>
                {
                    b.HasOne("Promises.Models.Profile", "User")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Promises.Models.Promise", b =>
                {
                    b.HasOne("Promises.Models.Profile", "PromiseBy")
                        .WithMany()
                        .HasForeignKey("PromiseByProfileId");

                    b.HasOne("Promises.Models.Profile", "PromiseTo")
                        .WithMany()
                        .HasForeignKey("PromiseToProfileId");
                });

            modelBuilder.Entity("Promises.Models.Skill", b =>
                {
                    b.HasOne("Promises.Models.Profile", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserProfileId");
                });
#pragma warning restore 612, 618
        }
    }
}
